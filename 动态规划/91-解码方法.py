"""
一条包含字母 A-Z 的消息通过以下方式进行了编码：

'A' -> 1
'B' -> 2
...
'Z' -> 26
给定一个只包含数字的非空字符串，请计算解码方法的总数。

示例 1:

输入: "12"
输出: 2
解释: 它可以解码为 "AB"（1 2）或者 "L"（12）。
示例 2:

输入: "226"
输出: 3
解释: 它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
"""


class Solution:
    def numDecodings(self, s: str) -> int:
        n = len(s)
        # 当s不存在或是s的第一位是0
        if not s or s[0] == '0':
            return 0
        # 初始化状态方程
        dp = [0] * (n+1)
        # 出口
        dp[0], dp[1] = 1, 1
        # 遍历
        for i in range(1, n):
            # 当s的第i位是0
            if s[i] == '0':
                # 如果其前一位是1或是2的话，第i+1为和第i-1为相同，因为上一位和本位置结合在一起了
                if s[i-1] == '1' or s[i-1] == '2':
                    dp[i+1] = dp[i-1]
                # 否则无法解码，返回0
                else:
                    return 0
            # 当s的第i位不是0
            else:
                # s的前一位是1或是前一位是2但是本位置是1到6之间的话，则包含两种解码方法
                if s[i-1] == '1' or (s[i-1] == '2' and '1' <= s[i] <= '6'):
                    dp[i+1] = dp[i] + dp[i-1]
                else:
                    dp[i+1] = dp[i]
        return dp[-1]
